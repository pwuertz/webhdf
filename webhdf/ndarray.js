/*
 * Utilities for handling binary data.
 */

dtype_map = {
	int8: {View: Int8Array, size: 1, getter: "getInt8"},
	uint8: {View: Uint8Array, size: 1, getter: "getUint8"},
	int16: {View: Int16Array, size: 2, getter: "getInt16"},
	uint16: {View: Uint16Array, size: 2, getter: "getUint16"},
	int32: {View: Int32Array, size: 4, getter: "getInt32"},
	uint32: {View: Uint32Array, size: 4, getter: "getUint32"},
	float32: {View: Float32Array, size: 4, getter: "getFloat32"},
	float64: {View: Float64Array, size: 8, getter: "getFloat64"},
}

function isSupportedDtype(dtype) {
	if (dtype instanceof Array) {
		var is_supported = true;
		for (var i=0; i < dtype.length; i++) {
			is_supported = is_supported && isSupportedDtype(dtype[i]);
		};
		return is_supported;
	} else {
		dtype = (typeof dtype === "string") ? dtype : dtype.dtype;
		return (dtype in dtype_map);
	}
}

function IteratingDataView(arraybuffer) {
	if (!(this instanceof IteratingDataView)) {
		return new IteratingDataView(arraybuffer);
	}
	this.data_view = new DataView(arraybuffer);
	this.offset = 0;
}

/**
 * Successively read arbitrary datatypes from a DataView.
 * The function keeps track of the read pointer.
 * 
 * @param {Object} dtype - datatype to read from buffer
 */
IteratingDataView.prototype.readNext = function(dtype) {
	if (typeof dtype === "string") dtype = dtype_map[dtype];
	var value = this.data_view[dtype.getter](this.offset, true); // force little-endian for now
	this.offset += dtype.size;
	return value;
}

/**
 * Return a string representation of a TypedArray interpreted as
 * n-dimensional array.
 * 
 * @param {TypedArray} data - array to be printed.
 * @param {Array} dims - sizes of the dimensions.
 */
function ndarray_stringify(data, dims, ndformat) {
	if (typeof ndformat === "undefined") {
		ndformat = {open: ["["], close: ["]"], sep: [", "]};
	}

	function __axis_to_str(axis, offset) {
		var txt = "";
		var sopen = ndformat.open[Math.min(axis, ndformat.open.length-1)];
		var sclose = ndformat.close[Math.min(axis, ndformat.close.length-1)];
		var ssep = ndformat.sep[Math.min(axis, ndformat.sep.length-1)];
		if (axis == dims.length-1) {
			txt += sopen + data[offset];
			for (var i=1; i < dims[axis]; i++) {
				txt += ssep + data[offset+i];
			};
			txt += sclose;
		} else {
			txt += sopen + __axis_to_str(axis+1, offset);
			offset += dims[axis+1];
			for (var i=1; i < dims[axis]; i++) {
				txt += ssep + __axis_to_str(axis+1, offset);
				offset += dims[axis+1];
			};
			txt += sclose;
		}
		return txt;
	}
	return __axis_to_str(0, 0);
}


/**
 * Return a string representation of a nested Array interpreted as
 * n-dimensional array.
 * 
 * @param {Array} data - nested array to be printed.
 * @param {Array} ndformat - format strings for each dimension.
 */
function ndarray_nested_stringify(data, ndformat) {
	if (typeof ndformat === "undefined") {
		ndformat = {open: ["["], close: ["]"], sep: [", "]};
	}

	function __axis_to_str(subdata, axis) {
		var txt = "";
		if (!(subdata instanceof Array)) {
			return subdata;
		} else {
			var sopen = ndformat.open[Math.min(axis, ndformat.open.length-1)];
			var sclose = ndformat.close[Math.min(axis, ndformat.close.length-1)];
			var ssep = ndformat.sep[Math.min(axis, ndformat.sep.length-1)];

			txt += sopen + __axis_to_str(subdata[0], axis+1);
			for (var i=1; i < subdata.length; i++) {
				txt += ssep + __axis_to_str(subdata[i], axis+1);
			};
			txt += sclose;
		}
		return txt;
	}
	return __axis_to_str(data, 0);
}


/**
 * Return a nested array copy of a TypedArray interpreted as
 * n-dimensional array.
 * 
 * @param {TypedArray} data - array to be printed.
 * @param {Array} dims - sizes of the dimensions.
 */
function ndarray_to_nested(data, dims) {
	function __axis_to_array(axis, offset) {
		if (axis == dims.length-1) {
			var a = [];
			for (var i=0; i < dims[axis]; i++) {
				a.push(data[i+offset]);
			}
			return a;
		} else {
			var a = [];
			for (var i=0; i < dims[axis]; i++) {
				a.push(__axis_to_array(axis+1, offset));
				offset += dims[axis+1];
			}
			return a;
		}
	}
	return __axis_to_array(0, 0);
}


/**
 * Return a nested array copy of a record-array.
 * 
 * @param {ArrayBuffer} data - array to be printed.
 * @param {Array} dims - sizes of the dimensions.
 * @param {Object} dtype - datatype definition.
 */
function recarray_to_nested(data, dims, dtype) {
	var view = IteratingDataView(data);
	function __axis_to_array(axis, subdtype) {
		if (axis == dims.length) {
			// reached the last axis
			if (subdtype instanceof Array) {
				var a = [];
				for (var i=0; i < subdtype.length; i++) {
					a.push(__axis_to_array(axis, subdtype[i]));
				}
				return a;
			} else {
				return view.readNext((typeof subdtype === "string")?subdtype:subdtype.dtype);
			}
		} else {
			// iterate through axes
			var a = [];
			for (var i=0; i < dims[axis]; i++) {
				a.push(__axis_to_array(axis+1, subdtype));
			}
			return a;
		}
	}
	return __axis_to_array(0, dtype);
}


var colormaps = {
	wjet: {
		r: [1.0, 0.2, 0.0, 0.0, 0.5, 1.0, 1.0, 1.0],
		g: [1.0, 0.3, 0.5, 1.0, 1.0, 1.0, 0.3, 0.0],
		b: [1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0],
	},
	jet: {
		r: [0.0, 0.0, 0.0, 0.5, 1.0, 1.0],
		g: [0.0, 0.0, 1.0, 1.0, 1.0, 0.0],
		b: [0.5, 1.0, 1.0, 0.3, 0.0, 0.0],
	},
	hot: {
		r: [0.0, 0.8, 1.0, 1.0],
		g: [0.0, 0.0, 0.9, 1.0],
		b: [0.0, 0.0, 0.0, 1.0],
	},
	gray: {
		r: [0.0, 1.0],
		g: [0.0, 1.0],
		b: [0.0, 1.0],
	},
	bwr: {
		r: [0.2298057, 0.234299935, 0.238810063, 0.243336663, 0.247880265, 0.25244136, 0.257020396, 0.261617779, 0.26623388, 0.270869029, 0.275523523, 0.28019762, 0.284891546, 0.289605495, 0.294339624, 0.299094064, 0.30386891, 0.308664231, 0.313480065, 0.318316422, 0.323173283, 0.328050603, 0.332948312, 0.337866311, 0.342804478, 0.347762667, 0.352740705, 0.357738399, 0.362755532, 0.367791863, 0.372847134, 0.37792106, 0.38301334, 0.38812365, 0.39325165, 0.398396976, 0.40355925, 0.408738074, 0.413933033, 0.419143694, 0.424369608, 0.429610311, 0.434865321, 0.440134144, 0.445416268, 0.450711169, 0.456018308, 0.461337134, 0.46666708, 0.472007569, 0.477358011, 0.482717804, 0.488086336, 0.493462982, 0.498847107, 0.504238066, 0.509635204, 0.515037856, 0.520445349, 0.525857, 0.531272118, 0.536690004, 0.542109949, 0.54753124, 0.552953156, 0.558374965, 0.563795935, 0.569215322, 0.574632379, 0.580046354, 0.585456486, 0.590862011, 0.596262162, 0.601656165, 0.607043242, 0.61242261, 0.617793485, 0.623155076, 0.628506592, 0.633847237, 0.639176211, 0.644492714, 0.649795942, 0.655085089, 0.660359348, 0.665617908, 0.670859959, 0.676084688, 0.681291281, 0.686478925, 0.691646803, 0.696794099, 0.701919999, 0.707023684, 0.712104339, 0.717161148, 0.722193294, 0.727199962, 0.732180337, 0.737133606, 0.742058956, 0.746955574, 0.751822652, 0.756659379, 0.761464949, 0.766238556, 0.770979397, 0.775686671, 0.780359577, 0.78499732, 0.789599105, 0.79416414, 0.798691636, 0.803180808, 0.807630872, 0.812041048, 0.81641056, 0.820738635, 0.825024503, 0.829267397, 0.833466556, 0.837621221, 0.841730637, 0.845794055, 0.849810727, 0.853779913, 0.857700874, 0.861572878, 0.865395197, 0.86977749, 0.874064226, 0.878255583, 0.882351728, 0.886352818, 0.890259, 0.89407041, 0.897787179, 0.901409427, 0.904937269, 0.908370816, 0.911710171, 0.914955433, 0.918106696, 0.921164054, 0.924127593, 0.926997401, 0.929773562, 0.932456159, 0.935045272, 0.937540984, 0.939943375, 0.942252526, 0.944468518, 0.946591434, 0.948621357, 0.950558373, 0.952402567, 0.954154029, 0.955812849, 0.957379123, 0.958852946, 0.960234418, 0.961523642, 0.962720725, 0.963825777, 0.964838913, 0.965760251, 0.966589914, 0.96732803, 0.967974729, 0.96853015, 0.968994435, 0.969367729, 0.969650186, 0.969841963, 0.969943224, 0.969954137, 0.969874878, 0.969705626, 0.96944657, 0.969097901, 0.968659818, 0.968132528, 0.967516241, 0.966811177, 0.966017559, 0.965135621, 0.964165599, 0.963107739, 0.961962293, 0.960729521, 0.959409687, 0.958003065, 0.956509936, 0.954930586, 0.95326531, 0.951514411, 0.949678196, 0.947756983, 0.945751096, 0.943660866, 0.941486631, 0.939228739, 0.936887543, 0.934463404, 0.931956691, 0.929367782, 0.92669706, 0.923944917, 0.921111753, 0.918197974, 0.915203996, 0.912130241, 0.908977139, 0.905745128, 0.902434654, 0.89904617, 0.895580136, 0.892037022, 0.888417303, 0.884721464, 0.880949996, 0.877103399, 0.873182178, 0.869186849, 0.865117934, 0.860975962, 0.85676147, 0.852475004, 0.848117114, 0.843688361, 0.839189312, 0.834620542, 0.829982631, 0.82527617, 0.820501754, 0.815659988, 0.810751482, 0.805776855, 0.800736732, 0.795631745, 0.790462533, 0.785229744, 0.779934029, 0.774576051, 0.769156474, 0.763675975, 0.758135232, 0.752534934, 0.746875773, 0.741158452, 0.735383675, 0.729552157, 0.723664618, 0.717721782, 0.711724383],
		b: [0.753683153, 0.759874796, 0.766005866, 0.772075394, 0.778082421, 0.784026001, 0.789905199, 0.79571909, 0.801466763, 0.807147315, 0.812759858, 0.818303516, 0.823777422, 0.829180725, 0.834512584, 0.839772171, 0.84495867, 0.850071279, 0.855109207, 0.860071679, 0.864957929, 0.869767207, 0.874498775, 0.87915191, 0.883725899, 0.888220047, 0.892633669, 0.896966095, 0.90121667, 0.905384751, 0.909469711, 0.913470934, 0.917387822, 0.921219788, 0.924966262, 0.928626686, 0.932200518, 0.93568723, 0.939086309, 0.942397257, 0.945619588, 0.948752835, 0.951796543, 0.954750272, 0.957613599, 0.960386113, 0.96306742, 0.96565714, 0.968154911, 0.970560381, 0.972873218, 0.975093102, 0.97721973, 0.979252813, 0.981192078, 0.983037268, 0.98478814, 0.986444467, 0.988006036, 0.989472652, 0.990844132, 0.99212031, 0.993301037, 0.994386177, 0.995375608, 0.996269227, 0.997066945, 0.997768685, 0.99837439, 0.998884016, 0.999297533, 0.999614929, 0.999836203, 0.999961374, 0.999990472, 0.999923544, 0.999760652, 0.999501871, 0.999147293, 0.998697024, 0.998151185, 0.99750991, 0.996773351, 0.995941671, 0.995015049, 0.993993679, 0.992877768, 0.991667539, 0.990363227, 0.988965083, 0.987473371, 0.985888369, 0.984210369, 0.982439677, 0.980576612, 0.978621507, 0.976574709, 0.974436577, 0.972207484, 0.969887816, 0.967477972, 0.964978364, 0.962389418, 0.959711569, 0.956945269, 0.95409098, 0.951149176, 0.948120345, 0.945004985, 0.941803607, 0.938516733, 0.935144898, 0.931688648, 0.928148539, 0.92452514, 0.92081903, 0.917030798, 0.913161047, 0.909210387, 0.90517944, 0.901068838, 0.896879224, 0.892611249, 0.888265576, 0.883842876, 0.87934383, 0.874769128, 0.870119469, 0.865395561, 0.859948576, 0.854466231, 0.848949435, 0.843399101, 0.837816138, 0.832201453, 0.826555954, 0.820880546, 0.815176131, 0.809443611, 0.803683885, 0.79789785, 0.792086401, 0.786250429, 0.780390824, 0.774508472, 0.768604257, 0.76267906, 0.756733758, 0.750769226, 0.744786333, 0.738785947, 0.732768931, 0.726736146, 0.720688446, 0.714626683, 0.708551706, 0.702464356, 0.696365473, 0.690255891, 0.68413644, 0.678007945, 0.671871226, 0.665727098, 0.659576372, 0.653419853, 0.647258341, 0.64109263, 0.634923509, 0.628751763, 0.62257817, 0.616403502, 0.610228525, 0.604054002, 0.597880686, 0.591709328, 0.585540669, 0.579375448, 0.573214394, 0.567058232, 0.560907681, 0.554763452, 0.54862625, 0.542496774, 0.536375716, 0.530263762, 0.524161591, 0.518069875, 0.511989279, 0.505920462, 0.499864075, 0.493820764, 0.487791167, 0.481775914, 0.475775629, 0.46979093, 0.463822426, 0.457870719, 0.451936407, 0.446020077, 0.440122312, 0.434243684, 0.428384763, 0.422546107, 0.41672827, 0.410931798, 0.40515723, 0.399405096, 0.393675922, 0.387970225, 0.382288516, 0.376631297, 0.370999065, 0.36539231, 0.359811513, 0.354257151, 0.348729691, 0.343229596, 0.33775732, 0.332313313, 0.326898016, 0.321511863, 0.316155284, 0.310828702, 0.305532531, 0.300267182, 0.295033059, 0.289830559, 0.284660075, 0.279521991, 0.27441669, 0.269344545, 0.264305927, 0.259301199, 0.254330723, 0.249394851, 0.244493934, 0.239628318, 0.234798343, 0.230004348, 0.225246666, 0.220525627, 0.215841558, 0.211194782, 0.20658562, 0.202014392, 0.197481414, 0.192987001, 0.188531467, 0.184115123, 0.179738284, 0.175401259, 0.171104363, 0.166847907, 0.162632207, 0.158457578, 0.154324339],
		g: [0.298717966, 0.305559204, 0.312388385, 0.319205292, 0.326009656, 0.332801165, 0.339579464, 0.346344164, 0.353094838, 0.359831032, 0.36655226, 0.373258014, 0.379947761, 0.386620945, 0.393276993, 0.399915313, 0.406535296, 0.413136319, 0.419717745, 0.426278924, 0.432819194, 0.439337884, 0.445834313, 0.45230779, 0.458757618, 0.465183092, 0.471583499, 0.477958123, 0.484306241, 0.490627125, 0.496920043, 0.503184261, 0.50941904, 0.515623638, 0.521797312, 0.527939316, 0.534048902, 0.540125323, 0.546167829, 0.552175668, 0.558148092, 0.564084349, 0.56998369, 0.575845364, 0.581668623, 0.587452719, 0.593196905, 0.598900436, 0.604562568, 0.61018256, 0.615759672, 0.621293167, 0.626782311, 0.632226371, 0.637624618, 0.642976326, 0.648280772, 0.653537236, 0.658745003, 0.66390336, 0.669011598, 0.674069012, 0.679074903, 0.684028574, 0.688929332, 0.693776492, 0.698569369, 0.703307287, 0.707989572, 0.712615557, 0.717184578, 0.721695979, 0.726149107, 0.730543315, 0.734877964, 0.739152418, 0.743366047, 0.747518228, 0.751608345, 0.755635786, 0.759599947, 0.763500228, 0.767336039, 0.771106793, 0.774811913, 0.778450826, 0.782022968, 0.78552778, 0.788964712, 0.792333219, 0.795632765, 0.798862821, 0.802022864, 0.805112381, 0.808130864, 0.811077814, 0.813952739, 0.816755156, 0.81948459, 0.82214057, 0.824722639, 0.827230344, 0.829663241, 0.832020895, 0.834302879, 0.836508774, 0.838638169, 0.840690662, 0.842665861, 0.84456338, 0.846382843, 0.848123884, 0.849786142, 0.85136927, 0.852872925, 0.854296776, 0.855640499, 0.856903782, 0.85808632, 0.859187816, 0.860207984, 0.861146547, 0.862003236, 0.862777795, 0.863469972, 0.864079527, 0.864606232, 0.865049863, 0.86541021, 0.863633958, 0.861776352, 0.859837644, 0.857818097, 0.85571798, 0.853537573, 0.851277164, 0.848937047, 0.846517528, 0.844018919, 0.841441541, 0.838785722, 0.836051799, 0.833240115, 0.830351023, 0.827384882, 0.824342058, 0.821222926, 0.818027865, 0.814757264, 0.811411517, 0.807991025, 0.804496196, 0.800927443, 0.797285187, 0.793569853, 0.789781872, 0.785921682, 0.781989725, 0.777986449, 0.773912305, 0.769767752, 0.765553251, 0.761269267, 0.756916272, 0.752494738, 0.748005143, 0.743447967, 0.738823693, 0.734132809, 0.729375802, 0.724553162, 0.719665383, 0.714712956, 0.709696378, 0.704616143, 0.699472746, 0.694266682, 0.688998447, 0.683668532, 0.678277431, 0.672825633, 0.667313624, 0.661741889, 0.656110908, 0.650421156, 0.644673104, 0.638867216, 0.63300395, 0.627083758, 0.621107082, 0.615074355, 0.608986, 0.602842431, 0.596644046, 0.590391232, 0.584084361, 0.57772379, 0.571309856, 0.564842879, 0.558323158, 0.551750968, 0.545126562, 0.538450165, 0.531721972, 0.524942147, 0.518110821, 0.511228087, 0.504293997, 0.49730856, 0.490271735, 0.483183431, 0.476043498, 0.468851724, 0.461607831, 0.454311462, 0.446962183, 0.439559467, 0.43210269, 0.424591118, 0.417023898, 0.409400045, 0.401718425, 0.393977745, 0.386176527, 0.378313092, 0.370385535, 0.362391695, 0.354329127, 0.346195061, 0.337986361, 0.329699471, 0.32133036, 0.312874446, 0.304326513, 0.295680611, 0.286929926, 0.278066636, 0.269081721, 0.259964733, 0.250703507, 0.24128379, 0.231688768, 0.221898442, 0.211888813, 0.201630762, 0.191088518, 0.180217488, 0.168961101, 0.157246067, 0.144974956, 0.132014017, 0.1181719, 0.103159409, 0.086504694, 0.067344036, 0.043755173],
	},
}

/**
 * Create an offscreen canvas and draw a colormapped image from data.
 * 
 * @param {TypedArray} array - image data
 * @param {Number} width - width of the array
 * @param {Number} height - height of the array
 * @param {Object} options
 * ... {Number} vmin - value mapped to the minimum (default 0)
 * ... {Number} xmax - value mapped to the maximum (default "auto")
 * ... {Number} cmap - colormap definition (default "jet")
 */
function ndarray_to_canvas(array, width, height, options) {
	options = (typeof options === "undefined") ? {} : options;
	var vmax = (typeof options.vmax === "undefined") ? "auto" : options.vmax;
	var vmin = (typeof options.vmin === "undefined") ? 0 : options.vmin;
	var cmap = (typeof options.cmap === "undefined") ? "jet" : options.cmap;
	if (typeof cmap === "string") {cmap = colormaps[cmap];}

	if (vmax === "auto") {
		vmax = -Infinity;
		for (var i=0; i < array.length; i++) {
			if (isFinite(array[i])) vmax = Math.max(vmax, array[i]);
		};
	}
	if (vmin === "auto") {
		vmin = Infinity;
		for (var i=0; i < array.length; i++) {
			if (isFinite(array[i])) vmin = Math.min(vmin, array[i]);
		};
	}
	
	var offscreen_canvas = document.createElement('canvas');
	offscreen_canvas.width = width;
	offscreen_canvas.height = height;
	var ctx = offscreen_canvas.getContext("2d");
	var img = ctx.getImageData(0, 0, width, height);
	
	var cstops = cmap.r.length;
	var scalef = (cstops-1) / (vmax-vmin);
	
	var cmapr = new Float64Array(cmap.r);
	var cmapg = new Float64Array(cmap.g);
	var cmapb = new Float64Array(cmap.b);

	for (var i = 0, j = 0; j < array.length; i += 4, j++) {
		if (!isFinite(array[j])) continue;
		var val = Math.max(scalef * (array[j]-vmin), 0);
		var c1 = Math.floor(Math.min(val   , cstops-1));
		var c2 = Math.floor(Math.min(val+1., cstops-1));
		var f = val - c1;
		img.data[i    ] = (cmapr[c1]*(1.-f) + cmapr[c2]*f) * 255;
		img.data[i + 1] = (cmapg[c1]*(1.-f) + cmapg[c2]*f) * 255;
		img.data[i + 2] = (cmapb[c1]*(1.-f) + cmapb[c2]*f) * 255;
		img.data[i + 3] = 255;
	}
	ctx.putImageData(img, 0, 0);
	return offscreen_canvas;
}

